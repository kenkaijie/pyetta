name: Build, Test, and Coverage

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  TestAndCoverage:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    name: Test and Coverage (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      TOX_PARALLEL_NO_SPINNER: 1
      TOX_REPORT_PREFIX: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python Versions
        uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies (using latest python)
        run: |
          python --version
          pip --version
          pip install --upgrade pip
          pip install .[dev]
      - name: Run Test With Coverage
        run: |
          tox -p -v
      - name: Generate Coverage Reports
        run: |
          coverage combine
          coverage xml -o coverage_report.xml
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # always run even if the previous step fails
        with:
          name: Unit Tests (${{ matrix.os }})
          path: '**/*_unit_test_result.xml'
          reporter: java-junit
      - name: Publish Code Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: "coverage_report.xml"
          fail_ci_if_error: true

  Docs:
    name: Build Docs
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v3
     - name: Set up Python 3.10
       uses: actions/setup-python@v4
       with:
         python-version: '3.x'
     - name: Install dependencies
       run: |
         python --version
         pip --version
         pip install --upgrade pip
         pip install .[dev]
     - name: Generate Docs
       run: sphinx-build -W docs dist/docs
